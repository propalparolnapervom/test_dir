name: Auto Approve Workflow

on: 
  pull_request:
    paths:
      - 'dir1/**'
      - 'dir2/**'
    types:
      - opened
      - edited
      - reopened
      - labeled

jobs:
  verify_modified_files_job:
    runs-on: ubuntu-latest
    steps:
    - name: Verify Modified Files Step
      # if: github.mergeable_state != 'draft'
      run: |

          # Make sure this PR is not a "Draft PR"

          echo
          echo "    THIS IS STATE OF THIS MERGE: ${{ github.mergeable_state }}"
          echo

          echo
          echo "  Let see if ${{ github.mergeable_state }} is proper state for the PR ..."
          echo

          if 
            echo ${{ github.mergeable_state }} | grep -i draft 
          then
            echo
            echo "  ERROR: This PR is Draft PR. No automation work can be done further"
            echo
            exit 6
          else
            echo
            echo  " CONFIRMED: This PR is not a Draft PR. Keep automation steps."
            echo
          fi

          # List of the dirs, modifications of which could be Automatically Approved
          #   LIST_OF_ONLY_DIRS_TO_BE_MODIFIED="dir1 dir2 dir3 ..."
          LIST_OF_ONLY_DIRS_TO_BE_MODIFIED="dir1 dir2"
          curl --request GET \
          --url https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.number }}/files \
          --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | \
          grep filename > modified_files_list.txt
          cat modified_files_list.txt | awk ' {print $2} ' | sed -e "s/\"//" | sed -e "s/\/.*//" | uniq > modified_dirs_list.txt
          for modified_dir in `cat modified_dirs_list.txt`
          do
              if
                echo ${LIST_OF_ONLY_DIRS_TO_BE_MODIFIED} | grep ${modified_dir}
              then
                echo
                echo "  \"${modified_dir}\" is allowed for modifications, if you want to be Auto Approved."
                echo
              else
                echo
                echo "  \"${modified_dir}\" is not allowed for modifications, if you want to be Auto Approved."
                echo
                FILE_IS_OUT_OF_ALLOWED_DIR="yes"
              fi
          done
          if [ "${FILE_IS_OUT_OF_ALLOWED_DIR}" = "yes" ]
          then
            echo
            echo
            echo
            echo "  ERROR: PR can not be Auto Approved, as files out of \"$LIST_OF_ONLY_DIRS_TO_BE_MODIFIED\" dir list were found."
            echo
            echo
            exit 8
          else
            echo
            echo
            echo
            echo "  CONFIRMED: PR can be Auto Approved, as all modified files are in \"$LIST_OF_ONLY_DIRS_TO_BE_MODIFIED\" dir list."
            echo
            echo
          fi
  autoapprove_job:
    needs: verify_modified_files_job
    runs-on: ubuntu-latest
    steps:
    - name: Auto Approve Step
      # if: success() && github.mergeable_state != 'draft'
      uses: hmarr/auto-approve-action@v2.0.0
      with:
        github-token: "${{ secrets.GITHUB_TOKEN }}"

  autorebasemerge_job:
    needs: autoapprove_job
    runs-on: ubuntu-latest
    steps:
      - name: Auto Rebase and Merge Step 
        # if: success()
        uses: docker://ppnp/nolabelautomerge:latest
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          MERGE_METHOD: "rebase"

  delete_branch_job:
    needs: autorebasemerge_job
    runs-on: ubuntu-latest
    steps:
    - name: Delete the Branch after Auto Rebase and Merge Step
      # if: success()
      run: |

          curl --request DELETE \
          --url https://api.github.com/repos/${{ github.repository }}/git/refs/heads/${{ github.head_ref }} \
          --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}'


  # Slack notification step needs following to be done:
  #    1. Generate a Slack incoming webhook token, as described at:
  #       https://slack.com/apps/A0F7XDUAZ-incoming-webhooks.
  #    2. Create `SLACK_WEBHOOK`Â GitHub secret for generated webhook, as described at:
  #       https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets#creating-encrypted-secrets.
  slack_notify_job:
    needs: delete_branch_job
    runs-on: ubuntu-latest
    steps:
    - name: Slack Notification
      # if: success()
      uses: docker://ppnp/actions-slack-notify:latest
      env:
        SLACK_CHANNEL: test-test
        SLACK_COLOR: '#3278BD'
        SLACK_ICON: https://github.com/rtCamp.png?size=48
        SLACK_MESSAGE: 'PR `${{ github.event.number }}` automatically approved and merged, its `${{ github.head_ref }}` branch deleted.'
        SLACK_TITLE: 'Congrats! :fire:'
        SLACK_USERNAME: auto-merge bot
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}